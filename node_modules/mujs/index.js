var g8 = require('g8')
var Nu = require('nu-x')
/**
 * Create a new instance of the computer.
 *
 * @constructor
 * @return {Object}
 */
var Mu = module.exports = function() {
  /**
   * Set to g8.hi() and back to lo to reset CPU.
   * @type {String} 1-bit reset flag.
   */
  this.reset = g8.lo()
  /**
   * 10-bit wide instruction / address bus. Program storage.
   * @type {Array}
   */
  this.rom = []
  /**
   * 10-bit wide cluster of 16-bit registers. 1K of addressable memory.
   * @type {Function}
   */
  this.ram = g8.cluster(Nu.WORD, 1024)
  /**
   * Run the next instruction available from rom.
   *
   * @param {Function} inspect Callback function to step into or
   * @return {String} Instruction.
   */
  this.next = (function() {
    var cpu = Nu.controller(), data = g8.lo(Nu.WORD), i = 0;
    return function(inspect) {
      if (i = this.rom[parseInt(cpu.next || 0, 2)])
        data = this.ram(cpu(i, data, this.reset, inspect).out,
                        cpu.address,
                        cpu.load)
      else // Reset CPU when run out of instructions.
        cpu = Nu.controller()

      return i
    }
  }())
}
/**
 * Retrieve data in memory at the specified address.
 *
 * @param {String} address 10-bit binary number.
 * @return {String}
 */
Mu.prototype.memory = function(address) {
  return this.ram(g8.lo(Nu.WORD), address, g8.lo())
}
