const test = require("tape").test
const g8 = require("g8")
const Nu = require("../")

test("nu", function (t) {
  t.ok(Nu !== undefined, "is defined")
  t.end()
})

test("sel=0000 → 0", function(t) {
  t.equal(Nu.alu("000", "000", "0000").out, "000")
  t.equal(Nu.alu("111", "111", "0000").out, "000")
  t.end()
})


test("sel=0001 → 1", function(t) {
  t.equal(Nu.alu("000", "000", "0001").out, "001")
  t.equal(Nu.alu("111", "111", "0001").out, "001")
  t.end()
})

test("sel=0010 → x", function(t) {
  t.equal(Nu.alu("010", "000", "0010").out, "010")
  t.equal(Nu.alu("111", "111", "0010").out, "111")
  t.end()
})

test("sel=0011 → y", function(t) {
  t.equal(Nu.alu("010", "000", "0011").out, "000")
  t.equal(Nu.alu("111", "011", "0011").out, "011")
  t.end()
})

test("sel=0100 → !x", function(t) {
  t.equal(Nu.alu("010", "000", "0100").out, "101")
  t.equal(Nu.alu("111", "011", "0100").out, "000")
  t.equal(Nu.alu("001", "011", "0100").out, "110")
  t.end()
})

test("sel=0101 → !y", function(t) {
  t.equal(Nu.alu("010", "000", "0101").out, "111")
  t.equal(Nu.alu("111", "011", "0101").out, "100")
  t.equal(Nu.alu("001", "010", "0101").out, "101")
  t.end()
})

test("sel=0110 → -x", function(t) {
  t.equal(Nu.alu("001", "111", "0110").out, "111")
  t.equal(Nu.alu("010", "111", "0110").out, "110")
  t.equal(Nu.alu("011", "111", "0110").out, "101")
  t.end()
})

test("sel=0111 → -y", function(t) {
  t.equal(Nu.alu("111", "001", "0111").out, "111")
  t.equal(Nu.alu("111", "010", "0111").out, "110")
  t.equal(Nu.alu("111", "011", "0111").out, "101")
  t.end()
})

test("sel=1000 → x+1", function(t) {
  t.equal(Nu.alu("000", "111", "1000").out, "001")
  t.equal(Nu.alu("001", "111", "1000").out, "010")
  t.equal(Nu.alu("010", "111", "1000").out, "011")
  t.equal(Nu.alu("011", "111", "1000").out, "100")
  t.equal(Nu.alu("100", "111", "1000").out, "101")
  t.equal(Nu.alu("101", "111", "1000").out, "110")
  t.equal(Nu.alu("110", "111", "1000").out, "111")
  t.equal(Nu.alu("111", "111", "1000").out, "000")
  t.end()
})

test("sel=1001 → y+1", function(t) {
  t.equal(Nu.alu("000", "000", "1001").out, "001")
  t.equal(Nu.alu("000", "001", "1001").out, "010")
  t.equal(Nu.alu("000", "010", "1001").out, "011")
  t.equal(Nu.alu("000", "011", "1001").out, "100")
  t.equal(Nu.alu("000", "100", "1001").out, "101")
  t.equal(Nu.alu("000", "101", "1001").out, "110")
  t.equal(Nu.alu("000", "110", "1001").out, "111")
  t.equal(Nu.alu("000", "111", "1001").out, "000")
  t.end()
})

test("sel=1010 → x-1", function(t) {
  t.equal(Nu.alu("000", "111", "1010").out, "111")
  t.equal(Nu.alu("001", "111", "1010").out, "000")
  t.equal(Nu.alu("010", "111", "1010").out, "001")
  t.equal(Nu.alu("011", "111", "1010").out, "010")
  t.equal(Nu.alu("100", "111", "1010").out, "011")
  t.equal(Nu.alu("101", "111", "1010").out, "100")
  t.equal(Nu.alu("110", "111", "1010").out, "101")
  t.equal(Nu.alu("111", "111", "1010").out, "110")
  t.end()
})

test("sel=1011 → y-1", function(t) {
  t.equal(Nu.alu("000", "000", "1011").out, "111")
  t.equal(Nu.alu("000", "001", "1011").out, "000")
  t.equal(Nu.alu("000", "010", "1011").out, "001")
  t.equal(Nu.alu("000", "011", "1011").out, "010")
  t.equal(Nu.alu("000", "100", "1011").out, "011")
  t.equal(Nu.alu("000", "101", "1011").out, "100")
  t.equal(Nu.alu("000", "110", "1011").out, "101")
  t.equal(Nu.alu("000", "111", "1011").out, "110")
  t.end()
})

test("sel=1100 → x+y", function(t) {
  t.equal(Nu.alu("001", "000", "1100").out, "001")
  t.equal(Nu.alu("001", "001", "1100").out, "010")
  t.equal(Nu.alu("001", "010", "1100").out, "011")
  t.equal(Nu.alu("001", "011", "1100").out, "100")
  t.equal(Nu.alu("001", "100", "1100").out, "101")
  t.equal(Nu.alu("001", "101", "1100").out, "110")
  t.equal(Nu.alu("001", "110", "1100").out, "111")
  t.equal(Nu.alu("001", "111", "1100").out, "000")
  t.end()
})

test("sel=1101 → x-y", function(t) {
  t.equal(Nu.alu("000", "001", "1101").out, "111")
  t.equal(Nu.alu("000", "010", "1101").out, "110")
  t.equal(Nu.alu("000", "011", "1101").out, "101")
  t.equal(Nu.alu("001", "001", "1101").out, "000")
  t.equal(Nu.alu("010", "001", "1101").out, "001")
  t.equal(Nu.alu("011", "001", "1101").out, "010")
  t.equal(Nu.alu("100", "001", "1101").out, "011")
  t.equal(Nu.alu("101", "001", "1101").out, "100")
  t.equal(Nu.alu("110", "001", "1101").out, "101")
  t.equal(Nu.alu("111", "001", "1101").out, "110")
  t.end()
})

test("sel=1110 → x&y", function(t) {
  t.equal(Nu.alu("001", "111", "1110").out, "001")
  t.equal(Nu.alu("001", "011", "1110").out, "001")
  t.equal(Nu.alu("001", "001", "1110").out, "001")
  t.equal(Nu.alu("001", "000", "1110").out, "000")

  t.equal(Nu.alu("111", "001", "1110").out, "001")
  t.equal(Nu.alu("111", "010", "1110").out, "010")
  t.equal(Nu.alu("111", "100", "1110").out, "100")
  t.equal(Nu.alu("111", "010", "1110").out, "010")
  t.end()
})

test("sel=1111 → x|y", function(t) {
  t.equal(Nu.alu("001", "111", "1111").out, "111")
  t.equal(Nu.alu("001", "011", "1111").out, "011")
  t.equal(Nu.alu("001", "001", "1111").out, "001")
  t.equal(Nu.alu("001", "000", "1111").out, "001")

  t.equal(Nu.alu("111", "001", "1111").out, "111")
  t.equal(Nu.alu("111", "010", "1111").out, "111")
  t.equal(Nu.alu("111", "100", "1111").out, "111")
  t.equal(Nu.alu("111", "010", "1111").out, "111")
  t.end()
})

test("zr should 1 if the output is zero", function(t) { // 1101 = tx-y
  t.equal(Nu.alu("000", "001", "1101").zr, "0")
  t.equal(Nu.alu("000", "010", "1101").zr, "0")
  t.equal(Nu.alu("000", "011", "1101").zr, "0")
  t.equal(Nu.alu("001", "001", "1101").zr, "1")
  t.equal(Nu.alu("100", "100", "1101").zr, "1")
  t.equal(Nu.alu("101", "101", "1101").zr, "1")
  t.equal(Nu.alu("000", "000", "1101").zr, "1")
  t.equal(Nu.alu("010", "001", "1101").zr, "0")
  t.equal(Nu.alu("011", "001", "1101").zr, "0")
  t.equal(Nu.alu("100", "001", "1101").zr, "0")
  t.equal(Nu.alu("101", "001", "1101").zr, "0")
  t.equal(Nu.alu("110", "001", "1101").zr, "0")
  t.equal(Nu.alu("111", "001", "1101").zr, "0")
  t.end()
})

test("ng should be 1 if the output is negative (2\"s complement)", function(t) {
  t.equal(Nu.alu("000", "001", "1101").ng, "1")
  t.equal(Nu.alu("000", "010", "1101").ng, "1")
  t.equal(Nu.alu("000", "011", "1101").ng, "1")
  t.equal(Nu.alu("001", "001", "1101").ng, "0")
  t.equal(Nu.alu("010", "001", "1101").ng, "0")
  t.equal(Nu.alu("011", "001", "1101").ng, "0")
  t.equal(Nu.alu("100", "001", "1101").ng, "0")
  t.equal(Nu.alu("101", "001", "1101").ng, "1")
  t.equal(Nu.alu("110", "001", "1101").ng, "1")
  t.equal(Nu.alu("111", "001", "1101").ng, "1")
  t.end()
})


test("controller", function(t) {
  // Create ram, rom and cpu and run basic program `RAM[0] = !RAM[0]`
  const ram = g8.cluster(Nu.WORD, 1024)
  const rom = ["0000000000", "1110000101"] // A = 0; M = !M
  const cpu = Nu.controller()

  var reset = g8.lo()
  var data = g8.lo(Nu.WORD)
  var i = 0

  while (i = rom[parseInt(cpu.next || 0, 2)])
    data = ram(cpu(i, data, reset).out, cpu.address, cpu.load)
  t.equal(ram(g8.lo(Nu.Word), "0000000000", "0"), "1111111111111111",
    "load and write to memory")
  t.end()
})
